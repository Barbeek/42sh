/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   prototypes.h                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hben-yah <hben-yah@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/03/29 21:21:13 by hben-yah          #+#    #+#             */
/*   Updated: 2019/03/29 21:58:41 by aroblin          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PROTOTYPES_H
# define PROTOTYPES_H

/*
** Prototypes
*/

int				find_alias(char **alias, char *av);
void			print_alias(char *alias);
void			print_alias_lst(char **alias);
int				alias_invalid_name_error(char *name);
int				alias_not_found(char *name);
int				alias_wrong_arg_error(char arg);
int				check_alias(char *alias);
int				sh_alias(t_data *data, int ac, char **av);
int				check_alias_options(int *options, int ac, char ***av);
int				sh_bg(t_data *data, int ac, char **av);
int				exec_if_builtin(t_data *data, int ac, char **av);
int				is_builtin(char *s);
char			**get_builtins_list(void);
int				check_path_errors(char *path);
int				build_pwd_tab(char ***arg_tab, char ***pwd_tab
					, int pwd_tab_len);
void			cd_options_parser(char **args, int *options, int *pos_args);
char			*get_final_path(char **path, char **cdenv);
char			*get_pwd_for_cd(int pos_args, char **args, char **cdenv);
int				change_directory(char *pwd, char **cdenv, int options);
void			free_cd_tabs(char **tmp, char **nenv, char **narg);
int				sh_cd(t_data *data, int ac, char **av);
void			ft_strtab_del(char ***arr);
int				ft_stringtab_len(char **arr);
char			*ft_strjointab(char **arr, char sep);
int				sh_echo(t_data *data, int ac, char **av);
int				ft_is_number(char *s);
int				sh_exit(t_data *data, int ac, char **av);
int				export_id_error(char *val);
int				sh_export(t_data *data, int ac, char **av);
int				sh_fc(t_data *data, int ac, char **av);
int				sh_fg(t_data *data, int ac, char **av);
int				hash_wrong_arg_error(char arg);
int				hash_not_found(char *name);
int				empty_hash(t_h_table *hashtable);
int				check_each_path(t_data *data, char ***paths);
void			display_spaces(t_h_item *hash);
void			display_list(t_h_table *ht);
int				sh_hash(t_data *data, int ac, char **av);
int				check_hash_options(int *options, int ac, char ***av);
int				print_bad_job(int id, char *str);
int				parse_job_id_arg(char *str, t_job **jobs);
char			*get_classic_sig(int sig);
char			*get_detail_sig(int sig);
int				sh_jobs(t_data *data, int ac, char **av);
int				is_l_opt(char *opt);
int				is_p_opt(char *opt);
int				check_opt(char *opt);
void			build_opt(char **arg, char **opt, int *i);
int				print_process_group(t_job *jobs);
void			print_id(t_job *jobs, t_data_jobs *djobs);
int				print_classic_jobs(t_job *jobs, t_data_jobs *djobs);
int				print_detail_jobs(t_job *jobs, t_data_jobs *djobs);
int				print_job_list(t_job *jobs, t_data_jobs *djobs, char *opt);
int				max_id(t_job **jobs);
int				min_id(t_job **jobs);
int				last_id(t_job **jobs);
int				check_str_digit(char *str);
int				same_letter(char *str, char *str2);
int				sh_set(t_data *data, int ac, char **av);
char			**create_args(char **av, char **new_tab, int j, int i);
char			**test_args(size_t ac, char **av);
int				one_arg(char **str);
int				negative_res(int res);
int				sh_test(t_data *data, int i, char **arg);
int				rest_of_operands(char op, char *perm);
int				operands_b_to_l(char op, char *perm);
int				test_parse(char **str, int i);
void			check_user(struct stat *buf, char *perm);
void			check_group(struct stat *buf, char *perm);
void			check_other(struct stat *buf, char *perm);
char			*get_type_file(struct stat *buf, char *perm);
char			*get_permissions(char *pathname);
int				string_equality(char **str);
int				test_string(char **str);
int				operands_n_and_z(char op, char *str);
int				error_integer(char *str);
int				check_integer(char **str);
int				test_arithmetic(char **str);
int				three_args(char **str);
int				check_file_size(char *file);
int				check_operands(char op, char *str);
int				two_args(char **str);
int				is_type_alias(char *av, t_data *data);
int				check_error_flags_type(char *av);
int				error_type(char *arg);
int				sh_type(t_data *data, int ac, char **av);
int				sh_unalias(t_data *data, int i, char **av);
int				sh_unset(t_data *data, int ac, char **av);
int				check_terminal(t_data *data);
void			shell_exit(int ret);
void			init_term(t_data *data, int mode);
void			set_pwd_var(t_data *data);
char			*inline_args(int ac, char **av);
void			set_special_vars(t_data *data, int ac, char **av);
int				init_shell(t_data *data, int ac, char **av, char **env);
void			reset_term(t_data *data, int mode);
int				reset_shell(t_data *data);
void			reset_subshell(t_data *data);
void			reset_edl(t_edl *edl);
void			reset_command(t_data *data);
void			run_non_interactive_shell(t_data *data);
void			run_interactive_shell(t_data *data);
int				main(int ac, char **av, char **env);
void			*try_m(void *ptr);
int				wrong_arg_error(char arg);
int				put_error(int ret, char *message);
int				put_error2(int ret, char *info, char *message);
int				put_error3(int ret, char *info1, char *info2, char *message);
int				syntax_error(char *word, int subcmd);
int				term_error(char *message);
int				tent_error(char *ent);
int				unexpected_eof_error(int type);
void			exp_alias(t_data *data, t_token **token);
long			arithmetic(t_data *data, char *str);
void			exp_arithmetic(char **str, t_data *data);
int				compute_operation(t_data *data, char *exp, t_ast *ast
					, long *res);
int				compute_division(t_data *data, char *exp, t_ast *ast
					, long *res);
int				compute_variable(t_data *data, t_ast *ast, long *res);
int				compute_number(t_ast *ast, long *res);
int				compute(t_data *data, char *exp, t_ast *ast, long *res);
int				compute_crementation(t_data *data, t_ast *ast, long *res);
int				compute_logical(t_data *data, char *exp, t_ast *ast, long *res);
int				compute_inverse(t_data *data, char *exp, t_ast *ast, long *res);
void			arith_build_ast(t_data *data, t_ast **ast, t_token **token);
void			arith_fill_node(t_ast **ast, t_token **chosen);
int				arith_get_rank(int type);
void			routine_tok(t_token **token, t_token **primary
					, t_token **primary_prev);
t_token			*arith_get_primary_prev_token(t_token **primary_prev
					, t_token *token);
void			arith_remove_parentheses(t_token **tok);
int				arith_div_zero_error(char *expr, t_token *tok);
int				arith_value_base_error(t_token *begin, t_token *tok);
int				arith_syntax_error(char *expr, t_token *tok, int err);
t_token			*check_expression_lex(t_token *token, int *err);
int				check_expression(t_data *data, char *expr, t_token *token);
int				check_is_expression(t_token **tok);
int				check_is_number(t_token **tok);
int				check_number_base(char *s);
int				check_is_operande(t_token **tok);
int				check_is_comparison_op(t_token **tok);
int				check_is_calcul_op(t_token **tok);
int				check_is_operator(t_token **tok);
int				check_is_sub_expression(t_token **tok);
int				check_is_variable(t_token **tok);
t_token			*arith_get_crement_token(char **line);
t_token			*arith_get_variable_token(char **line, int check_post_crement);
t_token			*compare_operator(char **line, int type, int test, int size);
t_token			*arith_get_operators_token(char **line);
void			arith_lexical_analysis(t_token **token, char *line);
void			exp_substit_cmd(char **str, t_data *data);
void			word_expansion(t_data *data, t_token *tok);
void			heredoc_expansion(t_data *data, char **heredoc);
void			heredoc_rewrite_expansion(t_data *data, t_token *tok);
void			redirection_file_expansion(t_data *data, t_token *tok);
void			expansion(t_data *data, t_ast *ast);
void			field_split(t_token **tok);
int				is_quote(char c);
void			exp_goto_next_quote(char **str);
int				exp_vars_exec(char *pos, int *i, char **s, t_data *data);
void			exp_vars(char **str, t_data *data, int heredoc);
char			*exp_assign(t_varsexp *exp, char *key, char *val, char *word);
char			*exp_unhandle(t_varsexp *exp, char *key, char *val, char *word);
char			*exp_vars_get(char *str, t_data *data);
char			*exp_sub_param(t_varsexp *exp, char *key, char *val
					, char *word);
char			*exp_sub_word(t_varsexp *exp, char *key, char *val, char *word);
char			*exp_sub_null(t_varsexp *exp, char *key, char *val, char *word);
char			*exp_sub_error(t_varsexp *exp, char *key, char *val
					, char *word);
char			*expand_dquote(char *line);
char			*expand_quote(char *line);
void			exp_quotes(char *line);
int				exp_tilde(char **str, t_data *data);
void			complete_from_alias(t_edl *edl, char **alias, t_token *tok);
void			complete_from_builtin(t_edl *edl, t_token *tok);
void			complete_command(t_data *data, t_edl *edl, t_token *tok);
void			set_compl_suffix(char **ret, char *res);
void			autocomplete(t_data *data, char **line);
char			*remove_backslash_before_spechar(char *s);
char			*insert_backslash_before_spechar(char *s);
void			check_file(t_edl *edl, char *path, char *file, char *entry);
void			complete_file(t_edl *edl, t_token *tok);
void			complete_from_tab_param(t_edl *edl, char **arr, char *key
					, int len);
void			complete_parameter(t_data *data, t_edl *edl, t_token *tok);
void			put_suggestions(t_edl *edl);
void			shift_up(t_car *car, int i);
void			shift_down(t_car *car, int i);
void			scroll_down(t_edl *edl, int i);
void			set_cars_positions(t_edl *edl, t_car *cur);
int				get_prompt_position(t_edl *edl);
void			delete_car(t_edl *edl, t_car *car);
void			handle_input(t_data *data, unsigned long key);
void			compose_heredoc(t_data *data, t_token *token, int is_quoted
					, int fd);
void			compose_command(t_data *data);
int				init_edl(t_edl *edl);
void			insert_car(t_car *car, char c);
void			insert_car_to_editline(t_edl *edl, char c);
void			insert_str_to_editline(t_edl *edl, char *str);
size_t			str_to_carlist(t_car **car, char *line);
char			*carlist_to_str(t_data *data);
void			overwrite_editline(t_edl *edl, char *line);
void			do_alt_c(t_data *data);
void			do_alt_left(t_data *data);
void			do_alt_right(t_data *data);
void			do_alt_v(t_data *data);
void			do_alt_x(t_data *data);
void			do_arrow_down(t_data *data);
void			do_arrow_left(t_data *data);
void			do_arrow_right(t_data *data);
void			do_arrow_up(t_data *data);
void			do_backspace(t_data *data);
void			do_ctrl_d(t_data *data);
void			do_delete(t_data *data);
void			do_end(t_data *data);
void			do_enter(t_data *data);
void			do_home(t_data *data);
void			do_shift_down(t_data *data);
void			do_shift_left(t_data *data);
void			do_shift_right(t_data *data);
void			do_shift_tab(t_data *data);
void			do_shift_up(t_data *data);
void			do_tabulation(t_data *data);
void			add_line_to_history(t_edl *edl);
void			add_line_to_command(t_data *data);
void			add_line_to_heredoc(t_data *data, int fd, int is_quoted);
void			save_line(t_data *data);
void			putwidecar(t_car *car);
void			putcarlist(t_car *car);
void			putcarlisttab(t_car **car);
void			update_view(t_edl *edl);
void			print_edition_line(t_edl *edl);
void			display_prompt(t_edl *edl);
void			set_prompt(t_edl *edl);
void			reset_edition_current_line(t_edl *edl);
void			clear_clip(t_edl *edl);
void			enter_select_mode(t_edl *edl);
void			leave_select_mode(t_edl *edl, int delete);
void			tc_clear_down(void);
void			tc_clear_effects(void);
void			tc_clear_screen(void);
void			tc_clear_to_eol(t_edl *edl);
void			tc_cursor_invisible(void);
void			tc_cursor_move(int h, int v);
void			tc_cursor_move_begin(void);
void			tc_cursor_move_down(t_edl *edl);
void			tc_cursor_move_left(t_edl *edl);
void			tc_cursor_move_right(t_edl *edl);
void			tc_cursor_move_up(t_edl *edl);
void			tc_newline(void);
void			tc_ring_bell(void);
void			tc_scroll_down(int i);
void			tc_scroll_up(int i);
void			tc_standout_off(void);
void			tc_standout_on(void);
size_t			str_to_carlist(t_car **car, char *line);
char			*carlist_to_str(t_data *data);
int				is_option_d(t_data *data);
int				check_options(t_data *data, int ac, char **av);
int				export_var(t_data *data, char *line);
char			*get_param(t_data *data, char *key);
char			**get_param_line(t_data *data, char *key);
char			*get_var(t_data *data, char *key);
char			**get_var_line(t_data *data, char *key);
int				set_special(t_data *data, char *key, char *value);
int				set_special_line(t_data *data, char *line);
int				set_special_nbr(t_data *data, char *key, long value);
int				set_special_nbr_key(t_data *data, long key, char *value);
int				set_var(t_data *data, char *key, char *value);
int				set_var_line(t_data *data, char *line);
int				set_var_nbr(t_data *data, char *key, long value);
int				set_var_nbr_key(t_data *data, long key, char *value);
int				unset_var(t_data *data, char *key);
void			build_ast(t_data *data);
void			fill_node(t_ast **ast, t_token **chosen, t_token **prev
					, t_token **beginlist);
int				get_rank(int type);
t_token			*get_primary_prev_token(t_token **primary_prev, t_token *token);
void			extract_parentheses(t_token *chosen, t_token **chosen_prev);
int				get_incomp_type(int type);
t_token			*check_command_lex(t_data *data, t_token *token);
int				check_heredoc(t_data *data, t_token *tok);
int				check_command(t_data *data);
int				check_parentheses(t_token *token);
int				check_brackets(t_token *token);
int				check_incomplete_type(t_token *token, int eof);
int				check_newline(t_token *token);
int				check_control_op(t_token *token, int type);
char			check_quote(t_token *token);
int				check_is_and_or(t_data *data, t_token **tok);
int				check_is_brace_group(t_data *data, t_token **tok);
int				check_is_cmd_name(t_token **tok);
int				check_is_cmd_prefix(t_data *data, t_token **tok);
int				check_is_cmd_suffix(t_data *data, t_token **tok);
int				check_is_cmd_word(t_token **tok);
int				check_is_command(t_data *data, t_token **tok);
int				check_is_complete_command(t_data *data, t_token **tok);
int				check_is_complete_commands(t_data *data, t_token **tok);
int				check_is_compound_command(t_data *data, t_token **tok);
int				check_is_compound_list(t_data *data, t_token **tok);
int				check_is_filename(t_data *data, t_token **tok);
int				check_is_here_end(t_data *data, t_token **tok);
int				check_is_io_file(t_data *data, t_token **tok);
int				check_is_io_here(t_data *data, t_token **tok);
int				check_is_io_redirect(t_data *data, t_token **tok);
int				check_is_linebreak(t_token **tok);
int				check_is_list(t_data *data, t_token **tok);
int				check_is_newline_list(t_token **tok);
int				check_is_pipe_sequence(t_data *data, t_token **tok);
int				check_is_pipeline(t_data *data, t_token **tok);
int				check_is_program(t_data *data, t_token **tok);
int				check_is_redirect_list(t_data *data, t_token **tok);
int				check_is_separator(t_token **tok);
int				check_is_separator_op(t_token **tok);
int				check_is_simple_command(t_data *data, t_token **tok);
int				check_is_subshell(t_data *data, t_token **tok);
int				check_is_term(t_data *data, t_token **tok);
int				check_token(t_token **tok, int type);
int				check_is_wordlist(t_token **tok);
void			get_heredoc(t_data *data, t_token *tok);
t_token			*get_delimitor_token(char **line, size_t wordlen);
void			lexical_analysis(t_token **token, char *line);
int				walk_word(char **line);
void			check_token_words(t_token *token);
int				exec_assignement(t_data *data, t_ast *ast);
int				exec_command_group(t_data *data, t_ast *ast);
int				and_or(t_data *data, t_ast *ast);
int				bang(t_data *data, t_ast *ast);
int				exec_newline(t_data *data, t_ast *ast);
int				exec_pipes(t_data *data, t_ast *ast);
int				exec_semicolon(t_data *data, t_ast *ast);
int				exec_cmd_line(t_data *data, t_ast *ast);
int				subshell_case(t_data *data, t_ast *ast, int *ret);
int				word_case(t_data_jobs *djobs, t_ast *ast, char ***tabl
					, int len);
char			**get_path(char **env, char **arg);
int				ex_exec_job_control(t_data *data, char **env, char **table);
int				ex_exec(t_data *data, char **env, char **table);
int				subshell(t_data *data, int ac, char **av);
int				exec_subcmd(t_data *data, t_ast *ast);
int				check_builtins(t_ast *ast);
void			control_jobs(t_data *data);
void			create_job_struct(t_job **job, t_ast **ast, int ground
					, int flag);
void			create_operators_lst(t_list **lst, t_ast *ast, int prev);
void			create_pipeline_lst(t_list **lst, t_ast *ast);
void			free_jobs(void);
void			free_jobs_param(t_job **jobs);
t_data_jobs		*get_data_jobs(void);
t_job			*get_job_by_id(t_job **jobs, int id);
void			get_job_name(char **str);
char			*get_sig_str(int sig);
int				is_job_ctrl_bt(t_ast *ast);
void			job_addend(t_job **job, t_job *new);
void			clean_finish_jobs(void);
int				launch_job(t_data *data, t_ast *ast);
int				launch_process(t_data *data, t_ast *ast, int *fds, int *pip);
void			delpipelist(void *content, size_t size);
void			deloplst(void *content, size_t size);
void			lstdel(t_list **alst, void (*del)(void *, size_t));
void			lstaddend(t_list **alst, t_list *new);
void			put_job_in_foreground(t_job *job, int cont);
void			put_job_in_background(t_job *job, int cont);
int				job_is_stopped(t_job *job);
int				job_is_completed(t_job *job);
void			process_addend(t_process **process, t_process *new);
void			ft_jobdelone(t_job **jlst);
int				remove_one_job_by_id(t_job **jobs_lst, int id, int iffreeast);
int				routine_fork(t_pipeline *pipeline, t_list *tmp, int *fds
					, int *pip);
void			routine_operators(t_list *lst);
void			routine_pipe(t_pipeline *pipeline);
void			token_list_dup_for_jobctrl(t_token *token);
int				mark_process_status(pid_t pid, int status, t_data_jobs *djobs);
void			wait_for_job(t_job *job);
void			update_status(void);
void			update_last_status(int status);
void			upt_pgid_and_process(t_job *current_job, pid_t pid);
int				find_path(t_data *data, char *built);
int				main_agregator(t_data *data, t_ast *ast, int type);
int				exec_heredoc(t_data *data, t_ast *ast);
int				check_fd(int fd);
int				check_word(char *s);
int				exec_back_redirect(t_data *data, t_ast *ast);
int				exec_redirect2(t_data *data, t_ast *ast);
int				exec_redirect(t_data *data, t_ast *ast, int rafter);
void			handle_sigint(void);
void			edl_sigint_handler(int sig);
void			here_edl_sigint_handler(int sig);
void			signal_handler(int sig);
void			catch_signals(void);
void			handle_sigwinch(t_data *data);
void			astlist_del(t_ast **ast);
t_car			*car_new(void);
t_car			*car_dup(t_car *car);
int				car_del(t_car **car);
t_car			*carlist_dup(t_car *car);
void			carlist_del(t_car **car);
void			carlist_del_until_nl(t_car **car);
t_data			*get_data(void);
int				h_item_free(t_h_table *hashtable);
void			h_table_free(t_h_table *hashtable);
t_h_table		*ht_create(unsigned int size);
unsigned int	hash(char *key, unsigned int size);
int				ht_put(t_h_table *hashtable, char *key, char *value);
char			*ht_get(t_h_table *hashtable, char *key);
void			fill_array(t_h_table *hashtable, t_h_item *tmp, t_h_item *node
					, int i);
void			node_handler(t_h_table *hashtable, t_h_item *node);
t_token			*token_new(char *val, size_t length, int type, t_token *next);
t_token			*token_dup(t_token *tok);
void			token_del(t_token **tok);
void			tokenlist_del(t_token **token);
size_t			tokenlist_to_tab(char ***table, t_token *token);
int				is_assignement(char *s);
int				arith_isspace(char c);
int				sh_isspace(char c);
int				is_control_op(int token);
int				is_redir_op(int token);
int				is_unsupported_op(int token);
int				is_word(int token);
int				is_variable_name(char *s);
char			*get_val(char **vars, char *key);
char			**get_keyval(char **vars, char *key);
int				set_val(char ***vars, char *key, char *value);
int				set_keyval(char ***vars, char *line);
int				set_val_nbr(char ***vars, char *key, long value);
int				set_key_nbr(char ***vars, long key, char *value);
int				unset_val(char ***vars, char *key);
int				print_ast(t_ast *ast);
int				print_lex(t_token *token, char *name);
int				sh_putchar(int c);
int				read_all_fd(char **text, int fd);
char			*read_input(int fd);
char			*read_heredoc(int fd);
char			*remove_esc_newlines(char *line);
char			*remove_last_newline(char *line);
char			*remove_heredoc_esc_newlines(char *line);
char			*walkparenthese(char *s);
char			*walkbracket(char *s);
char			*walkdollar(char *s);
char			*walkdoublequote(char *s);
char			*walksimplequote(char *s);
char			*walkbacktick(char *s);
int				has_quotes_or_backslash(char *s);
void			arith_skip_spaces(char **line);
void			skip_spaces(char **line);
t_token			*get_next_relevant_token(t_token *token);
t_token			*get_last_token(t_token *token);
int				next_token(t_token **token);
int				count_token(t_token *token);

#endif
